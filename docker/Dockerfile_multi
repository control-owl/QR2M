FROM rust:alpine AS base_system

LABEL maintainer="control-owl@r-o0-t.wtf" \
      version="1.0" \
      description="Build QR2M project with MUSL"

ENV PROJECT_DIR="/home/QR2M"
WORKDIR $PROJECT_DIR

RUN echo "https://dl-cdn.alpinelinux.org/alpine/v3.22/main" > /etc/apk/repositories && \
    echo "https://dl-cdn.alpinelinux.org/alpine/v3.22/community" >> /etc/apk/repositories && \
    apk update && \
    apk add bash build-base git cmake ninja meson bison pkgconf-dev musl-dev autoconf \
        automake libtool gcc g++ clang flex-dev flex-libs gawk rustc-dev

COPY docker/check_me_baby.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/check_me_baby.sh


FROM base_system AS pkgconfig

RUN apk add pkgconf-dev zlib-dev

COPY docker/static_library/01-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/01-*.sh

COPY --from=base_system /usr/local/lib /usr/local/lib
COPY --from=base_system /usr/local/bin /usr/local/bin
COPY --from=base_system /home/QR2M /home/QR2M

RUN $PROJECT_DIR/01-pkgconf.sh       # Compiles in 8s
RUN $PROJECT_DIR/01-zlib.sh          # Compiles in 3s


FROM base_system AS glib

RUN apk add libffi-dev pcre2-dev gettext-dev pcre2-dev gperf texinfo

COPY docker/static_library/02-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/02-*.sh

COPY --from=pkgconfig /usr/local/lib /usr/local/lib
COPY --from=pkgconfig /usr/local/bin /usr/local/bin
COPY --from=pkgconfig $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/02-libffi.sh        #| Compiles in 20s
RUN $PROJECT_DIR/02-pcre2.sh         #| Compiles in 26s
RUN $PROJECT_DIR/02-glib.sh          #| Compiles in 69s
RUN $PROJECT_DIR/02-gettext.sh       #| Compiles in 475s


FROM base_system AS x11

RUN apk add libxau-dev libxdmcp-dev libxcb-dev libx11-dev libxrender-dev libxext-dev xcb-util-dev

COPY docker/static_library/03-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/03-*.sh

COPY --from=glib /usr/local/lib /usr/local/lib
COPY --from=glib /usr/local/bin /usr/local/bin
COPY --from=glib $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/03-xorgproto.sh     #| Compiles in 4s
RUN $PROJECT_DIR/03-libxau.sh        #| Compiles in 19s
RUN $PROJECT_DIR/03-libxdmcp.sh      #| Compiles in 28s
RUN $PROJECT_DIR/03-libxcb.sh        #| Compiles in 32s
RUN $PROJECT_DIR/03-libx11.sh        #| Compiles in 67s
RUN $PROJECT_DIR/03-libxrender.sh    #| Compiles in 26s
RUN $PROJECT_DIR/03-libxext.sh       #| Compiles in 30s


FROM base_system AS fontconfig

RUN apk add expat-dev bzip2-dev freetype-dev fontconfig-dev zlib-dev py3-pytest

COPY docker/static_library/04-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/04-*.sh

COPY --from=x11 /usr/local/lib /usr/local/lib
COPY --from=x11 /usr/local/bin /usr/local/bin
COPY --from=x11 $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/04-libexpat.sh      #| Compiles in 27s
RUN $PROJECT_DIR/04-libbz2.sh        #| Compiles in 6s
RUN $PROJECT_DIR/04-freetype.sh      #| Compiles in 26s
RUN $PROJECT_DIR/04-fontconfig.sh    #| Compiles in 29s


FROM base_system AS cargo_c

RUN apk add zlib-dev openssl-dev nghttp2-dev curl-dev util-linux-dev util-linux-static \
    docbook-xml docbook-xsl gettext-dev gettext-libs uutils-coreutils rust-bindgen yaml-dev \
    gnu-libiconv-dev gnu-libiconv-libs itstool po4a tzdata appstream-dev appstream-glib-dev \
    dbus desktop-file-utils

COPY docker/static_library/05-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/05-*.sh

COPY --from=fontconfig /usr/local/lib /usr/local/lib
COPY --from=fontconfig /usr/local/bin /usr/local/bin
COPY --from=fontconfig $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/05-openssl.sh       #| Compiles in 306s
RUN $PROJECT_DIR/05-nghttp2.sh       #| Compiles in 35s
RUN $PROJECT_DIR/05-curl.sh          #| Compiles in 69s
RUN $PROJECT_DIR/05-cargo-c.sh       #| Compiles in 479s


FROM base_system AS unistring

RUN apk add \
    zlib-dev libpng-dev libxml2-dev tiff-dev libjpeg-turbo-dev graphene-dev \
    fribidi-dev libeconf-dev pixman-dev brotli-dev xz-dev libunistring-dev po4a \
    glib-dev pcre2-dev libffi-dev gettext-dev libepoxy-dev appstream-dev \
    gdk-pixbuf-dev texinfo gperf

COPY docker/static_library/06-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/06-*.sh

COPY --from=cargo_c /usr/local/lib /usr/local/lib
COPY --from=cargo_c /usr/local/bin /usr/local/bin
COPY --from=cargo_c $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/06-libpng.sh        #| Compiles in 15s
RUN $PROJECT_DIR/06-libxml2.sh       #| Compiles in 41s
RUN $PROJECT_DIR/06-libtiff.sh       #| Compiles in 32s
RUN $PROJECT_DIR/06-graphene.sh      #| Compiles in 5s
RUN $PROJECT_DIR/06-fribidi.sh       #| Compiles in 8s
RUN $PROJECT_DIR/06-libeconf.sh      #| Compiles in 12s
RUN $PROJECT_DIR/06-pixman.sh        #| Compiles in 21s
RUN $PROJECT_DIR/06-libjpeg-turbo.sh #| Compiles in 23s
RUN $PROJECT_DIR/06-libepoxy.sh      #| Compiles in 25s
RUN $PROJECT_DIR/06-brotli.sh        #| Compiles in 28s
RUN $PROJECT_DIR/06-xz.sh            #| Compiles in 41s
RUN $PROJECT_DIR/06-libunistring.sh  #| Compiles in 354s


FROM base_system AS gdk_pixbuf

RUN apk add \
    zlib-dev glib-dev appstream-dev gdk-pixbuf-dev texinfo gperf libpng-dev shared-mime-info \
    openssl-dev curl-dev openssl-libs-static appstream-glib-dev tiff-dev libjpeg-turbo-dev \
    docbook-xml docbook-xsl yaml-dev itstool

COPY docker/static_library/07-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/07-*.sh

COPY --from=unistring /usr/local/lib /usr/local/lib
COPY --from=unistring /usr/local/bin /usr/local/bin
COPY --from=unistring $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/07-appstream.sh     #| Compiles in 29s
RUN $PROJECT_DIR/07-gdk-pixbuf.sh    #| Compiles


FROM base_system AS gtk4

RUN apk add \
    glib-dev pcre2-dev libffi-dev gettext-dev zlib-dev libx11-dev libxext-dev \
    libxrender-dev libxrandr-dev libxfixes-dev libxcursor-dev libxi-dev \
    libxau-dev libxdmcp-dev libxcb-dev expat-dev bzip2-dev freetype-dev \
    fontconfig-dev cairo-dev pango-dev harfbuzz-dev libepoxy-dev gdk-pixbuf-dev \
    librsvg-dev gtk4.0-dev libadwaita-dev libxkbcommon-dev libxkbcommon-static \
    libunwind-dev llvm-dev graphite2-static graphite2-dev util-linux-static util-linux-dev

COPY docker/static_library/08-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/08-*.sh

COPY --from=gdk_pixbuf /usr/local/lib /usr/local/lib
COPY --from=gdk_pixbuf /usr/local/bin /usr/local/bin
COPY --from=gdk_pixbuf $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/08-cairo.sh         #| Compiles in 30s
RUN $PROJECT_DIR/08-harfbuzz.sh      #| Compiles in 104s
RUN $PROJECT_DIR/08-pango.sh         #| Compiles in 17s
RUN $PROJECT_DIR/08-gtk4.sh          #| Compiles in 232s
RUN $PROJECT_DIR/08-libadwaita.sh    #| Compiles in 45s
RUN $PROJECT_DIR/08-librsvg.sh       #| Compiles


FROM base_system AS project_deps

RUN apk add vulkan-loader-dev xrandr libxrandr-dev wayland-static wayland-dev \
        vulkan-headers vulkan-loader vulkan-tools vulkan-utility-libraries

COPY docker/static_library/09-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/09-*.sh

COPY --from=gtk4 /usr/local/lib /usr/local/lib
COPY --from=gtk4 /usr/local/bin /usr/local/bin
COPY --from=gtk4 $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/09-vulkan.sh       #| Compiles in 15s

FROM base_system AS compile_circus

RUN apk add bash build-base git cmake ninja meson bison pkgconf-dev musl-dev autoconf automake libtool \
        openssl-dev openssl-libs-static glib-dev cairo-dev harfbuzz-dev gettext-dev libepoxy-dev \
        libx11-dev libxext-dev glslang glslang-dev glslang-static shaderc-dev shaderc-static \
        libxkbcommon-dev libxkbcommon-static expat-dev expat-static freetype-dev fontconfig-dev \
        brotli-dev gawk texinfo libpng-dev libjpeg-turbo-dev zlib-dev bzip2-dev py3-pytest vulkan-loader \
        pixman-dev graphite2-dev graphite2-static libxrandr-dev libxrender-dev pango-dev musl-locales \
        libxfixes-dev libxcursor-dev libxi-dev pcre2-dev fribidi-dev util-linux-dev tiff-dev \
        util-linux-static libxcb-dev gdk-pixbuf-dev librsvg-dev vulkan-loader-dev vulkan-tools \
        xz-dev flex-dev flex-libs libxdamage-dev libunwind-dev libxau-dev po4a rust-bindgen \
        xcb-util-dev graphene-dev gtk4.0-dev libadwaita-dev appstream-dev appstream-glib-dev \
        yaml-dev yaml-static zstd-dev zstd-static nghttp2-dev nghttp2-libs libxml2-dev libxml2-utils \
        c-ares-dev c-ares-utils ca-certificates libeconf-dev itstool gperf uutils-coreutils \
        curl-dev rustc-dev ngtcp2-dev ngtcp2-static libidn2-dev libidn2-static libffi-dev libxslt \
        py3-pip python3 tzdata dbus desktop-file-utils docbook-xml docbook-xsl shared-mime-info \
        gnu-libiconv-dev gnu-libiconv-libs gettext-libs libxdmcp-dev gcc g++ vulkan-headers vulkan-utility-libraries

COPY docker/compile_circus.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/compile_circus.sh

COPY --from=project_deps /usr/local/lib /usr/local/lib
COPY --from=project_deps /usr/local/bin /usr/local/bin
COPY --from=project_deps $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/compile_circus.sh
