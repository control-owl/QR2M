FROM rust:alpine AS base_system

LABEL maintainer="control-owl@r-o0-t.wtf" \
      version="1.0" \
      description="Build QR2M project with MUSL"

# -.-. --- .--. -.-- .-. .. --. .... - / --.- .-. ..--- -- .- - .-. --- ----- - -.. --- - .-- - ..-.

ENV PROJECT_DIR="/home/QR2M"
WORKDIR $PROJECT_DIR

RUN echo "https://dl-cdn.alpinelinux.org/alpine/v3.22/main" > /etc/apk/repositories && \
    echo "https://dl-cdn.alpinelinux.org/alpine/v3.22/community" >> /etc/apk/repositories && \
    apk update && \
    apk add \
        bash build-base git cmake ninja meson bison autoconf po4a \
        automake libtool gcc g++ clang flex-dev flex-libs gawk gperf texinfo \
        rustc-dev rust-bindgen \
        docbook-xml docbook-xsl \
        musl musl-dev musl-utils musl-locales \
        util-linux-dev uutils-coreutils \
        dbus desktop-file-utils

COPY docker/check_me_baby.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/check_me_baby.sh

# -.-. --- .--. -.-- .-. .. --. .... - / --.- .-. ..--- -- .- - .-. --- ----- - -.. --- - .-- - ..-.

FROM base_system AS stage_1

RUN apk add \
        pkgconf-dev \
        zlib-dev \
        libffi-dev \
        pcre2-dev \
        glib-dev \
        gettext-dev

COPY docker/static_library/01-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/01-*.sh

COPY --from=base_system /usr/local/lib /usr/local/lib
COPY --from=base_system /usr/local/bin /usr/local/bin
COPY --from=base_system /home/QR2M /home/QR2M

RUN $PROJECT_DIR/01-pkgconf.sh       # Compiles in 8s
RUN $PROJECT_DIR/01-zlib.sh          # Compiles in 3s
RUN $PROJECT_DIR/01-libffi.sh        # Compiles in 17s
RUN $PROJECT_DIR/01-pcre2.sh         # Compiles in 22s
RUN $PROJECT_DIR/01-glib.sh          # Compiles in 62s
RUN $PROJECT_DIR/01-gettext.sh       # Compiles in 475s

# -.-. --- .--. -.-- .-. .. --. .... - / --.- .-. ..--- -- .- - .-. --- ----- - -.. --- - .-- - ..-.

FROM base_system AS stage_2

RUN apk add \
        libxau-dev \
        libxdmcp-dev \
        libxcb-dev xcb-util-dev \
        libx11-dev \
        libxrender-dev \
        libxext-dev \
        expat-dev \
        bzip2-dev \
        freetype-dev \
        fontconfig-dev py3-pytest

COPY docker/static_library/02-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/02-*.sh

COPY --from=stage_1 /usr/local/lib /usr/local/lib
COPY --from=stage_1 /usr/local/bin /usr/local/bin
COPY --from=stage_1 $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/02-xorgproto.sh     # Compiles in 4s
RUN $PROJECT_DIR/02-xorg-macros.sh   # Compiles in 5s
RUN $PROJECT_DIR/02-libxau.sh        # Compiles in 19s
RUN $PROJECT_DIR/02-libxdmcp.sh      # Compiles in 21s
RUN $PROJECT_DIR/02-libxcb.sh        # Compiles in 27s
RUN $PROJECT_DIR/02-libx11.sh        # Compiles in 55s
RUN $PROJECT_DIR/02-libxrender.sh    # Compiles in 20s
RUN $PROJECT_DIR/02-libxext.sh       # Compiles in 20s
RUN $PROJECT_DIR/02-libexpat.sh      # Compiles in 22s
RUN $PROJECT_DIR/02-libbz2.sh        # Compiles in 6s
RUN $PROJECT_DIR/02-freetype.sh      # Compiles in 18s
RUN $PROJECT_DIR/02-fontconfig.sh    # Compiles in 12s

# -.-. --- .--. -.-- .-. .. --. .... - / --.- .-. ..--- -- .- - .-. --- ----- - -.. --- - .-- - ..-.

FROM base_system AS stage_3

RUN apk add \
        openssl-dev \
        nghttp2-dev \
        curl-dev 

COPY docker/static_library/03-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/03-*.sh

COPY --from=stage_2 /usr/local/lib /usr/local/lib
COPY --from=stage_2 /usr/local/bin /usr/local/bin
COPY --from=stage_2 $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/03-openssl.sh       # Compiles in 306s
RUN $PROJECT_DIR/03-nghttp2.sh       # Compiles in 35s
RUN $PROJECT_DIR/03-curl.sh          # Compiles in 69s
#RUN $PROJECT_DIR/03-cargo-c.sh       # Compiles in 479s

# -.-. --- .--. -.-- .-. .. --. .... - / --.- .-. ..--- -- .- - .-. --- ----- - -.. --- - .-- - ..-.

FROM base_system AS stage_4

RUN apk add \
        libpng-dev \
        libxml2-dev \
        libjpeg-turbo-dev \
        tiff-dev \
        graphene-dev \
        fribidi-dev \
        libeconf-dev \
        pixman-dev \
        libepoxy-dev \
        brotli-dev \
        xz-dev \
        libunistring-dev \
        yaml-dev

COPY docker/static_library/04-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/04-*.sh

COPY --from=stage_3 /usr/local/lib /usr/local/lib
COPY --from=stage_3 /usr/local/bin /usr/local/bin
COPY --from=stage_3 $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/04-libpng.sh        # Compiles in 15s
RUN $PROJECT_DIR/04-libxml2.sh       # Compiles in 41s
RUN $PROJECT_DIR/04-libjpeg-turbo.sh # Compiles in 23s
RUN $PROJECT_DIR/04-libtiff.sh       # Compiles in 32s
RUN $PROJECT_DIR/04-graphene.sh      # Compiles in 5s
RUN $PROJECT_DIR/04-fribidi.sh       # Compiles in 8s
RUN $PROJECT_DIR/04-libeconf.sh      # Compiles in 12s
RUN $PROJECT_DIR/04-pixman.sh        # Compiles in 21s
RUN $PROJECT_DIR/04-libepoxy.sh      # Compiles in 25s
RUN $PROJECT_DIR/04-brotli.sh        # Compiles in 28s
RUN $PROJECT_DIR/04-xz.sh            # Compiles in 41s
RUN $PROJECT_DIR/04-libunistring.sh  # Compiles in 354s
RUN $PROJECT_DIR/04-libyaml.sh       # Compiles in 13s

# -.-. --- .--. -.-- .-. .. --. .... - / --.- .-. ..--- -- .- - .-. --- ----- - -.. --- - .-- - ..-.

FROM base_system AS stage_5

RUN apk add \
        appstream-dev \
        gdk-pixbuf-dev \
        cairo-dev \
        harfbuzz-dev \
        pango-dev \
        libxkbcommon-dev \
        libxrandr-dev \
        vulkan-loader-dev \
        libxi-dev \
        libxfixes-dev \
        libxcursor-dev \
        libxdamage-dev \
        libxinerama-dev \
        libdrm-dev \
        libsass-dev \
        libxcomposite-dev \
        gtk4.0-dev \
        libadwaita-dev

COPY docker/static_library/05-*.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/05-*.sh

COPY --from=stage_4 /usr/local/lib /usr/local/lib
COPY --from=stage_4 /usr/local/bin /usr/local/bin
COPY --from=stage_4 $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/05-appstream.sh     # Compiles in 25s
RUN $PROJECT_DIR/05-gdk-pixbuf.sh    # Compiles in 10s
RUN $PROJECT_DIR/05-cairo.sh         # Compiles in 25s
RUN $PROJECT_DIR/05-harfbuzz.sh      # Compiles in 91s
RUN $PROJECT_DIR/05-pango.sh         # Compiles in 18s
RUN $PROJECT_DIR/05-libxkbcommon.sh  # Compiles in 21s
RUN $PROJECT_DIR/05-libxrandr.sh     # Compiles in 3s
RUN $PROJECT_DIR/05-vulkan.sh        # Compiles in 15s
RUN $PROJECT_DIR/05-libxi.sh         # Compiles in 23s
RUN $PROJECT_DIR/05-libxfixes.sh     # Compiles in 3s
RUN $PROJECT_DIR/05-libxcursor.sh    # Compiles in 4s
RUN $PROJECT_DIR/05-libxdamage.sh    # Compiles in 3s
RUN $PROJECT_DIR/05-libxinerama.sh   # Compiles in 3s
RUN $PROJECT_DIR/05-libdrm.sh        # Compiles in 9s
RUN $PROJECT_DIR/05-libsass.sh       # Compiles in 57s
RUN $PROJECT_DIR/05-libxcomposite.sh # Compiles in 2s
RUN $PROJECT_DIR/05-gtk4.sh          # Compiles in 163s
RUN $PROJECT_DIR/05-libadwaita.sh    # Compiles in 28s

# -.-. --- .--. -.-- .-. .. --. .... - / --.- .-. ..--- -- .- - .-. --- ----- - -.. --- - .-- - ..-.

FROM base_system AS stage_6

# RUN apk add \
# openssl-dev openssl-libs-static glib-dev cairo-dev harfbuzz-dev gettext-dev libepoxy-dev \
# libx11-dev libxext-dev glslang glslang-dev glslang-static shaderc-dev shaderc-static \
# libxkbcommon-dev expat-dev expat-static freetype-dev fontconfig-dev  \
# brotli-dev gawk texinfo libpng-dev libjpeg-turbo-dev zlib-dev bzip2-dev py3-pytest vulkan-loader \
# pixman-dev graphite2-dev graphite2-static libxrandr-dev libxrender-dev pango-dev  \
# libxfixes-dev libxcursor-dev libxi-dev pcre2-dev fribidi-dev util-linux-dev tiff-dev \
# util-linux-static libxcb-dev gdk-pixbuf-dev librsvg-dev vulkan-loader-dev vulkan-tools \
# xz-dev flex-dev flex-libs libxdamage-dev libunwind-dev libxau-dev po4a rust-bindgen \
# xcb-util-dev graphene-dev gtk4.0-dev libadwaita-dev appstream-dev appstream-glib-dev \
# yaml-dev yaml-static zstd-dev zstd-static nghttp2-dev nghttp2-libs libxml2-dev libxml2-utils \
# c-ares-dev c-ares-utils ca-certificates libeconf-dev itstool gperf uutils-coreutils \
# curl-dev rustc-dev ngtcp2-dev ngtcp2-static libidn2-dev libidn2-static libffi-dev libxslt \
# py3-pip python3 tzdata dbus desktop-file-utils docbook-xml docbook-xsl shared-mime-info \
# gnu-libiconv-dev gnu-libiconv-libs gettext-libs libxdmcp-dev vulkan-headers vulkan-utility-libraries

COPY docker/compile_circus.sh $PROJECT_DIR
RUN chmod +x $PROJECT_DIR/compile_circus.sh

COPY --from=stage_5 /usr/local/lib /usr/local/lib
COPY --from=stage_5 /usr/local/bin /usr/local/bin
COPY --from=stage_5 $PROJECT_DIR $PROJECT_DIR

RUN $PROJECT_DIR/compile_circus.sh
