# -.-. --- .--. -.-- .-. .. --. .... - BASE SYSTEM -.-. --- .--. -.-- .-. .. --. .... -
FROM rust:alpine AS base_system

LABEL maintainer="control-owl@r-o0-t.wtf" \
      version="1.0" \
      description="Build QR2M project with MUSL"

ENV PROJECT_DIR="/home/QR2M"
WORKDIR $PROJECT_DIR

# -.-. --- .--. -.-- .-. .. --. .... - SYSTEM PACKAGES -.-. --- .--. -.-- .-. .. --. .... -
RUN echo "https://dl-cdn.alpinelinux.org/alpine/v3.22/main" > /etc/apk/repositories && \
    echo "https://dl-cdn.alpinelinux.org/alpine/v3.22/community" >> /etc/apk/repositories && \
    apk update && \
    apk add --no-cache \
        bash build-base git cmake ninja meson bison pkgconf-dev musl-dev autoconf automake libtool \
        openssl-dev openssl-libs-static glib-dev cairo-dev harfbuzz-dev gettext-dev libepoxy-dev \
        libx11-dev libxext-dev glslang glslang-dev glslang-static shaderc-dev shaderc-static \
        libxkbcommon-dev libxkbcommon-static expat-dev expat-static freetype-dev fontconfig-dev \
        brotli-dev gawk texinfo libpng-dev libjpeg-turbo-dev zlib-dev bzip2-dev py3-pytest \
        pixman-dev graphite2-dev graphite2-static libxrandr-dev libxrender-dev pango-dev musl-locales \
        libxfixes-dev libxcursor-dev libxi-dev pcre2-dev fribidi-dev util-linux-dev tiff-dev \
        util-linux-static libxcb-dev gdk-pixbuf-dev librsvg-dev vulkan-loader-dev vulkan-tools \
        xz-dev flex-dev flex-libs libxdamage-dev libunwind-dev libxau-dev po4a rust-bindgen \
        xcb-util-dev graphene-dev gtk4.0-dev libadwaita-dev appstream-dev appstream-glib-dev \
        yaml-dev yaml-static zstd-dev zstd-static nghttp2-dev nghttp2-libs libxml2-dev libxml2-utils \
        c-ares-dev c-ares-utils ca-certificates libeconf-dev itstool gperf uutils-coreutils \
        curl-dev rustc-dev ngtcp2-dev ngtcp2-static libidn2-dev libidn2-static libffi-dev libxslt \
        py3-pip python3 tzdata dbus desktop-file-utils docbook-xml docbook-xsl shared-mime-info \
        gnu-libiconv-dev gnu-libiconv-libs gettext-libs libxdmcp-dev gcc g++

# -.-. --- .--. -.-- .-. .. --. .... - BUILD SCRIPTS -.-. --- .--. -.-- .-. .. --. .... -
COPY docker/*.sh $PROJECT_DIR/
COPY docker/static_library/*.sh $PROJECT_DIR/
RUN chmod +x $PROJECT_DIR/*.sh



# -.-. --- .--. -.-- .-. .. --. .... - DEPENDENCIES -.-. --- .--. -.-- .-. .. --. .... -
#|                Library             | Dependency                 | Status
#| ---------------------------------- | -------------------------- | -------------------
RUN $PROJECT_DIR/00-pkgconf.sh       #|                            | Compiles in 8s
RUN $PROJECT_DIR/00-zlib.sh          #|                            | Compiles in 3s


RUN $PROJECT_DIR/01-gettext.sh       #|                            | Compiles in 475s
RUN $PROJECT_DIR/01-libffi.sh        #|                            | Compiles in 20s
RUN $PROJECT_DIR/01-pcre2.sh         #|                            | Compiles in 26s
RUN $PROJECT_DIR/01-glib.sh          #| pcre2,libffi,gettext,zlib  | Compiles in 69s


RUN $PROJECT_DIR/02-xorgproto.sh     #|                            | Compiles in 4s
RUN $PROJECT_DIR/02-libxau.sh        #| xorgproto                  | Compiles in 19s
RUN $PROJECT_DIR/02-libxdmcp.sh      #| xorgproto                  | Compiles in 28s
RUN $PROJECT_DIR/02-libxcb.sh        #| libxau,libxdmcp            | Compiles in 32s
RUN $PROJECT_DIR/02-libx11.sh        #| libxcb                     | Compiles in 67s
RUN $PROJECT_DIR/02-libxrender.sh    #| libx11                     | Compiles in 26s
RUN $PROJECT_DIR/02-libxext.sh       #| libx11                     | Compiles in 30s


RUN $PROJECT_DIR/03-libexpat.sh      #|                            | Compiles in 27s
RUN $PROJECT_DIR/03-libbz2.sh        #|                            | Compiles in 6s
RUN $PROJECT_DIR/03-freetype.sh      #| zlib                       | Compiles in 26s
RUN $PROJECT_DIR/03-fontconfig.sh    #| freetype,libbz2,libexpat   | Compiles in 29s


RUN $PROJECT_DIR/04-openssl.sh       #| zlib                       | Compiles in 305s
RUN $PROJECT_DIR/04-nghttp2.sh       #| zlib,openssl               | Compiles in 35s
RUN $PROJECT_DIR/04-curl.sh          #| zlib,openssl,nghttp2       | Compiles in 69s
RUN $PROJECT_DIR/04-cargo-c.sh       #| openssl                    | Compiles in 479s


RUN $PROJECT_DIR/05-libpng.sh        #| zlib                       | Compiles in 15s
RUN $PROJECT_DIR/05-libxml2.sh       #| zlib                       | Compiles in 41s
RUN $PROJECT_DIR/05-libtiff.sh       #| zlib                       | Compiles in 122s
RUN $PROJECT_DIR/05-graphene.sh      #|                            | Compiles in 5s
RUN $PROJECT_DIR/05-fribidi.sh       #|                            | Compiles in 8s
RUN $PROJECT_DIR/05-libeconf.sh      #|                            | Compiles in 12s
RUN $PROJECT_DIR/05-pixman.sh        #|                            | Compiles in 21s
RUN $PROJECT_DIR/05-libjpeg-turbo.sh #|                            | Compiles in 23s
RUN $PROJECT_DIR/05-libepoxy.sh      #|                            | Compiles in 25s
RUN $PROJECT_DIR/05-brotli.sh        #|                            | Compiles in 28s
RUN $PROJECT_DIR/05-xz.sh            #|                            | Compiles in 41s
RUN $PROJECT_DIR/05-libunistring.sh  #|                            | Compiles in 354s
RUN $PROJECT_DIR/05-gdk-pixbuf.sh    #| glib,pcre2,ffi,png,jpeg    | Checked, fail
RUN $PROJECT_DIR/05-appstream.sh     #| curl,xml2,econf,unistring  | Compiles in 29s


RUN $PROJECT_DIR/06-cairo.sh         #|                            | Compiles in 30s
RUN $PROJECT_DIR/06-pango.sh         #|                            | Compiles in 17s
RUN $PROJECT_DIR/06-harfbuzz.sh      #|                            | Compiles in 104s
RUN $PROJECT_DIR/06-gtk4.sh          #|                            | Compiles in 232s


RUN $PROJECT_DIR/07-libadwaita.sh    #|                            | Compiles in 45s
RUN $PROJECT_DIR/07-librsvg.sh       #|                            | Missing pkg-config ???

# FROM rust:alpine AS build_project
# 
# ENV PROJECT_DIR=/home/QR2M
# WORKDIR $PROJECT_DIR
# 
# RUN apk update && apk add --no-cache rust cargo pkgconf git coreutils bash \
#  libxml2-dev curl-dev zlib-dev glib-dev glib-static \
#  openssl-dev pango-dev libadwaita-dev
# 
# COPY --from=base_system $PROJECT_DIR/compile-circus $PROJECT_DIR/compile-circus

#RUN $PROJECT_DIR/compile-circus.sh
