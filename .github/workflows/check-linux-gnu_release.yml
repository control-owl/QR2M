name: Linux x86_64 GNU Release

on:
  push:
    branches: [ "testing" ]
    tags: [ "v*.*.*" ]
  # workflow_run:
  #   workflows: ["Verify GPG Signature"]
  #   types: 
  #     - completed
  #   branches: [ "master" ]

permissions:
  contents: write
  packages: write

jobs:
  standard:
    name: ${{ matrix.features }}-${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]
        features: ["offline", "full", "dev"]
      fail-fast: false

    steps:
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-4-dev libadwaita-1-dev pkg-config libssl-dev
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy rustfmt
        
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
##Pause
#       - name: Check formatting
#         run: cargo fmt -- --check
#
#       - name: Run Clippy
#         run: cargo clippy --no-deps --verbose --locked --features "${{ matrix.features }}" --target ${{ matrix.target }} -- -D warnings
#
#       - name: Run Cargo Check
#         run: cargo check --verbose --locked --features "${{ matrix.features }}" --target ${{ matrix.target }}

      - name: Build
        run: cargo build --release --features "${{ matrix.features }}" --target ${{ matrix.target }}
## Pause
      # - name: Run tests
      #   run: cargo test --release --locked --verbose --no-fail-fast --features "${{ matrix.features }}" --target ${{ matrix.target }}

      - name: Versioning
        run: |
          VERSION_NUMBER=$(head -n 1 Changelog.md | cut -d ':' -f 2- | tr -d ' #version')
          if [[ ! "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: VERSION_NUMBER is not in valid format: ${VERSION_NUMBER}"
            exit 1
          fi
          echo "VERSION_NUMBER=${VERSION_NUMBER}" | tee -a $GITHUB_ENV

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.ACTIONS_KEY }}
          passphrase: ${{ secrets.ACTIONS_PASS }}
          git_user_signingkey: true
          git_commit_gpgsign: false
          git_tag_gpgsign: true

      - name: Create tag
        env:
          VERSION_NUMBER: ${{ env.VERSION_NUMBER }}
          GPG_PRIVATE_KEY: ${{ secrets.ACTIONS_KEY }}
          GPG_KEY_ID: ${{ secrets.ACTIONS_KEY_ID }}
          passphrase: ${{ secrets.ACTIONS_PASS }}
        run: |
          git config user.name "QR2M"
          git config user.email "${{ secrets.ACTIONS_EMAIL }}"
          
          echo "Importing app GPG key..."
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import || {
            echo "Failed to import GPG key"
            exit 1
          }
          
          echo "Verifying app GPG key..."
          if gpg --list-secret-keys --keyid-format LONG | grep -q "$GPG_KEY_ID"; then
            echo "GPG key verified found."
          else
            echo "GPG key not found."
            exit 1
          fi
  
          echo "Configuring signing key..."
          git config user.signingkey "$GPG_KEY_ID"
          git config commit.gpgsign true
          git config tag.gpgSign true
          
          echo "Checking if tag v$VERSION_NUMBER exists..."
          if ! git rev-parse "v$VERSION_NUMBER" >/dev/null 2>&1; then
            echo "Tag v$VERSION_NUMBER does not exists."
            echo "Creating signed tag v$VERSION_NUMBER..."
            if ! git tag -a "v$VERSION_NUMBER" -s -m "Release v$VERSION_NUMBER"; then
              echo "GPG signing failed"
              exit 1
            fi
              git push origin "v$VERSION_NUMBER" || {
                echo "Tag push failed"
                exit 1
              }
              echo "Tag v$VERSION_NUMBER created sucessfully."
              git ls-remote --tags origin
            else
              echo "Tag v$VERSION_NUMBER already exists, skipping"
          fi

      - name: Signature
        run: |
          APP_PATH="target/${{ matrix.target }}/release/QR2M"
          SIG_FILE="$APP_PATH-${{ matrix.features }}.sig"
          echo "APP_PATH: $APP_PATH"
          echo "SIG_FILE: $SIG_FILE"
          
          if [ ! -f "$APP_PATH" ]; then
            echo "Error: Binary not found at $APP_PATH"
            exit 1
          fi
          
          "$APP_PATH" & PID=$!
          sleep 5
          
          if [ -f "$SIG_FILE" ]; then
            echo "Signature file created: $SIG_FILE"
          else
            echo "Error: SIG file not found at: $SIG_FILE"
            kill $PID 2>/dev/null || true
            exit 1
          fi

      - name: Prepare release files
        run: |
          strip target/${{ matrix.target }}/release/QR2M
          mkdir -p LAB7041
          cp target/${{ matrix.target }}/release/QR2M LAB7041/QR2M-${{ env.VERSION_NUMBER }}-${{ matrix.features }}
          cp Changelog.md LAB7041/Changelog.md
          cp LICENSE.txt LAB7041/LICENSE.txt
          cp target/${{ matrix.target }}/release/QR2M-${{ matrix.features }}.sig LAB7041/QR2M-${{ matrix.features }}.sig
          sync

      - name: Compress release
        run: |
          tar -czf LAB7041/QR2M-${{ env.VERSION_NUMBER }}-${{ matrix.features }}-${{ matrix.target }}.tar.gz -C LAB7041 QR2M-${{ env.VERSION_NUMBER }}-${{ matrix.features }} QR2M-${{ matrix.features }}.sig Changelog.md LICENSE.txt

#      - name: Upload artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: QR2M-${{ env.VERSION_NUMBER }}-${{ matrix.features }}-${{ matrix.target }}
#          path: LAB7041/QR2M-${{ env.VERSION_NUMBER }}-${{ matrix.features }}-${{ matrix.target }}.tar.gz
#          retention-days: 7

      - name: Upload to GitHub Releases
        # if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            LAB7041/QR2M-${{ env.VERSION_NUMBER }}-${{ matrix.features }}-${{ matrix.target }}.tar.gz
            Changelog.md
            LICENSE.txt
          draft: false
          prerelease: true
          tag_name: v${{ env.VERSION_NUMBER }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}