name: Release macOS aarch64 Darwin

on:
  workflow_run:
    workflows: ["Verify GPG Signature"]
    types:
      - completed
    branches: [ "master" ]

permissions:
  contents: write
  packages: write

jobs:
  standard:
    name: ${{ matrix.features }}-${{ matrix.target }}
    runs-on: macos-latest
    strategy:
      matrix:
        target: [aarch64-apple-darwin]
        features: ["offline", "full", "dev"]
      fail-fast: false

    env:
      APP_NAME: "QR2M"
      APP_BINARY: "target/${{ matrix.target }}/release/$APP_NAME"
      SIG_FILE: "APP_BINARY-${{ matrix.features }}.sig"
      OUTPUT_DIR: "LAB7041/macos"
      PKG_CONFIG_PATH: "/opt/homebrew/lib/pkgconfig:/opt/homebrew/opt/openssl@3.0/lib/pkgconfig:/usr/local/lib/pkgconfig"
      LDFLAGS: "-L/opt/homebrew/opt/openssl@3.0/lib -L/opt/homebrew/lib"
      CPPFLAGS: "-I/opt/homebrew/opt/openssl@3.0/include -I/opt/homebrew/include"

    steps:
      - name: Install system dependencies
        run: |
          brew update
          brew install gtk4 libadwaita pkg-config openssl@3.0 glib
          pkg-config --modversion glib-2.0
          pkg-config --modversion openssl

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: clippy rustfmt

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check code
        run: |
          cargo fmt -- --check
          cargo clippy --no-deps --verbose --locked --features "${{ matrix.features }}" --target ${{ matrix.target }} -- -D warnings

      - name: Build
        run: cargo build --release --verbose --locked --target ${{ matrix.target }} --features "${{ matrix.features }}"

      - name: Run tests
        run: cargo test --release --locked --verbose --no-fail-fast --target ${{ matrix.target }} --features "${{ matrix.features }}"

      - name: Versioning
        run: |
          VERSION_NUMBER=$(head -n 1 Changelog.md | cut -d ':' -f 2- | tr -d ' #version')
          if [[ ! "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: VERSION_NUMBER is not in valid format: ${VERSION_NUMBER}"
            exit 1
          fi
          echo "VERSION_NUMBER=${VERSION_NUMBER}" | tee -a $GITHUB_ENV

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.ACTIONS_KEY }}
          passphrase: ${{ secrets.ACTIONS_PASS }}
          git_user_signingkey: true
          git_commit_gpgsign: false
          git_tag_gpgsign: true

      - name: Create tag
        env:
          VERSION_NUMBER: ${{ env.VERSION_NUMBER }}
          GPG_PRIVATE_KEY: ${{ secrets.ACTIONS_KEY }}
          GPG_KEY_ID: ${{ secrets.ACTIONS_KEY_ID }}
          GPG_PASS: ${{ secrets.ACTIONS_PASS }}
          GPG_MAIL: ${{ secrets.ACTIONS_EMAIL }}
        run: |
          #!/bin/bash
          git config user.name "$APP_NAME"
          git config user.email "$GPG_MAIL"

          echo "Checking if tag v$VERSION_NUMBER exists..."
          if ! git rev-parse "v$VERSION_NUMBER" >/dev/null 2>&1; then
            echo "Tag v$VERSION_NUMBER does not exists."
            echo "Creating signed tag v$VERSION_NUMBER..."
            if ! git tag -a "v$VERSION_NUMBER" -s -m "Release v$VERSION_NUMBER"; then
              echo "GPG signing failed"
              exit 1
            fi
              git push origin "v$VERSION_NUMBER" || {
                echo "Tag push failed"
                exit 1
              }
              echo "Tag v$VERSION_NUMBER created sucessfully."
              git ls-remote --tags origin
            else
              echo "Tag v$VERSION_NUMBER already exists, skipping"
          fi

      - name: Signature
        run: |
          if [ ! -f "$APP_BINARY" ]; then
            echo "Error: Binary not found at $APP_BINARY"
            exit 1
          fi

          "$APP_BINARY" & PID=$!
          
          for i in {1..30}; do
            [ -f "$SIG_FILE" ] && { echo "Signature file created: $SIG_FILE"; break; }
            sleep 1
          done

          if [ ! -f "$SIG_FILE" ]; then
            echo "Error: SIG file not found at: $SIG_FILE"
            kill $PID 2>/dev/null || true
            exit 1
          fi

      - name: Prepare release files
        run: |
          strip target/${{ matrix.target }}/release/$APP_NAME
          mkdir -p $OUTPUT_DIR
          cp target/${{ matrix.target }}/release/$APP_NAME $OUTPUT_DIR/$APP_NAME-${{ env.VERSION_NUMBER }}-${{ matrix.features }}
          cp target/${{ matrix.target }}/release/$APP_NAME-${{ matrix.features }}.sig $OUTPUT_DIR/$APP_NAME-${{ matrix.features }}.sig
          tar -czf $OUTPUT_DIR/$APP_NAME-${{ env.VERSION_NUMBER }}-${{ matrix.features }}-${{ matrix.target }}.tar.gz -C $OUTPUT_DIR \
            $APP_NAME-${{ env.VERSION_NUMBER }}-${{ matrix.features }} \
            $APP_NAME-${{ matrix.features }}.sig \
            Changelog.md \
            LICENSE.txt

      - name: Upload to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          files: |
            $OUTPUT_DIR/$APP_NAME-${{ env.VERSION_NUMBER }}-${{ matrix.features }}-${{ matrix.target }}.tar.gz
            Changelog.md
            LICENSE.txt
          draft: false
          prerelease: true
          tag_name: v${{ env.VERSION_NUMBER }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}