name: Release macOS aarch64 Darwin

on:
  workflow_run:
    workflows: ["Verify GPG Signature"]
    types:
      - completed
    branches: [ "master" ]

permissions:
  contents: write
  packages: write

jobs:
  standard:
    name: ${{ matrix.features }}-${{ matrix.target }}
    runs-on: macos-latest
    strategy:
      matrix:
        target: [aarch64-apple-darwin]
        features: ["offline", "full", "dev"]
      fail-fast: false

    env:
      APP_NAME: "QR2M"
      APP_PATH: "target/${{ matrix.target }}/release"
      OUTPUT_DIR: "LAB7041/${{ matrix.target }}"
      PKG_CONFIG_PATH: "/opt/homebrew/lib/pkgconfig:/opt/homebrew/opt/openssl@3.0/lib/pkgconfig:/usr/local/lib/pkgconfig"
      LDFLAGS: "-L/opt/homebrew/opt/openssl@3.0/lib -L/opt/homebrew/lib"
      CPPFLAGS: "-I/opt/homebrew/opt/openssl@3.0/include -I/opt/homebrew/include"

    steps:
      - name: "Install system dependencies"
        run: |
          brew update
          brew install \
            gtk4 \
            libadwaita \
            pkg-config \
            openssl@3.0 \
            glib
          
          echo "GLib version: $(pkg-config --modversion glib-2.0)"
          echo "OpenSSL version: $(pkg-config --modversion openssl)"

      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Cache cargo dependencies"
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: "Install Rust"
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: clippy rustfmt

      - name: "Check code"
        run: |
          cargo fmt --
          cargo clippy --no-deps --verbose --locked --features "${{ matrix.features }}" --target ${{ matrix.target }} -- -D warnings

      - name: "Build project"
        run: |
          echo "Building with features: ${{ matrix.features }}"
          cargo build --release --verbose --locked --target ${{ matrix.target }} --features "${{ matrix.features }}"

      - name: "Tests project"
        run: cargo test --release --locked --verbose --no-fail-fast --target ${{ matrix.target }} --features "${{ matrix.features }}"

      - name: "Extract version number"
        run: |
          VERSION_NUMBER=$(head -n 1 Changelog.md | cut -d ':' -f 2- | tr -d ' #version')
          
          if [[ ! "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: VERSION_NUMBER is not in valid format: ${VERSION_NUMBER}"
            echo "Expected format: 1.2.3"
            exit 1
          fi
          echo "VERSION_NUMBER=${VERSION_NUMBER}" | tee -a $GITHUB_ENV

      - name: "Import GPG key"
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.ACTIONS_KEY }}
          passphrase: ${{ secrets.ACTIONS_PASS }}
          git_user_signingkey: true
          git_commit_gpgsign: false
          git_tag_gpgsign: true

      - name: "Create tag"
        run: |
          git config user.name "${{ env.APP_NAME }}"
          git config user.email "${{ secrets.ACTIONS_EMAIL }}"
          VERSION="v${{ env.VERSION_NUMBER }}"
          
          echo "Checking if tag $VERSION exists..."
          
          if [ -n "$(git ls-remote --tags origin "$VERSION")" ]; then
            echo "Tag $VERSION already exists on remote, skipping."
          else
            echo "Tag $VERSION does not exist on remote. Creating new signed tag."
          
            if ! git tag -a "$VERSION" -s -m "Release $VERSION"; then
              echo "GPG signing failed"
              exit 1
            fi
          
            if ! git push origin "$VERSION"; then
              echo "Tag push failed"
              exit 1
            fi
          
            echo "Tag $VERSION created successfully."
          fi

      - name: "Generate signature file"
        run: |
          BIN="${{ env.APP_PATH }}/${{ env.APP_NAME }}"
          SIG="${BIN}-${{ matrix.features }}.sig"
          
          if [ ! -f "$BIN" ]; then
            echo "Error: Binary not found at $BIN"
            exit 1
          fi
          
          $BIN & PID=$!
          for i in {1..30}; do
            [ -f "$SIG" ] && break
            sleep 1
          done
          kill $PID || true
          
          if [ ! -f "$SIG" ]; then
            echo "Error: SIG file not found at $SIG"
            exit 1
          fi
          echo "Signature file generated sucessfully at: $SIG"

      - name: Prepare release files
        run: |
          BIN_DIR="target/${{ matrix.target }}/release"
          APP_NAME="${{ env.APP_NAME }}"
          FEATURES="${{ matrix.features }}"
          VERSION="${{ env.VERSION_NUMBER }}"
          OUTPUT_DIR="${{ env.OUTPUT_DIR }}"
          TARGET="${{ matrix.target }}"
          BIN_FILE="${APP_NAME}"
          SIG_FILE="${APP_NAME}-${FEATURES}.sig"
          OUTPUT_BIN="${APP_NAME}-${VERSION}-${FEATURES}"
          TAR_FILE="${OUTPUT_BIN}-${TARGET}.tar.gz"

          strip "${BIN_DIR}/${BIN_FILE}"
          mkdir -p "${OUTPUT_DIR}"
          cp "${BIN_DIR}/${BIN_FILE}" "${OUTPUT_DIR}/${OUTPUT_BIN}"
          cp "${BIN_DIR}/${SIG_FILE}" "${OUTPUT_DIR}/${SIG_FILE}"
          
          tar -czf "${OUTPUT_DIR}/${TAR_FILE}" \
            -C "${OUTPUT_DIR}" "${OUTPUT_BIN}" "${SIG_FILE}" \
            -C ../../ Changelog.md LICENSE.txt \
          && echo "Release files prepared"

      - name: "Upload to GitHub Releases"
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{ env.OUTPUT_DIR }}/${{ env.APP_NAME }}-${{ env.VERSION_NUMBER }}-${{ matrix.features }}-${{ matrix.target }}.tar.gz
            Changelog.md
            LICENSE.txt
          draft: false
          prerelease: true
          tag_name: v${{ env.VERSION_NUMBER }}