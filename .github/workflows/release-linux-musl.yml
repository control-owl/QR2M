name: Release Linux x86_64 MUSL

on:
  push:
    branches: [ "musl" ]
  pull_request:
    branches: [ "musl" ]
#  workflow_run:
#    workflows: ["Verify GPG Signature"]
#    types:
#      - completed
#    branches: [ "master" ]

permissions:
  contents: write
  packages: write

jobs:
  standard:
    name: ${{ matrix.features }}-${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ x86_64-unknown-linux-musl ]
        features: [ "offline", "full", "dev" ]
      fail-fast: false

    env:
      APP_NAME: "QR2M"
      APP_PATH: "target/${{ matrix.target }}/release"
      OUTPUT_DIR: "LAB7041/${{ matrix.target }}"

    steps:
#      - name: "Install system dependencies"
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y \
#            libglib2.0-dev \
#            libgtk-4-dev \
#            libadwaita-1-dev \
#            pkg-config \
#            libssl-dev \
#            build-essential \
#            musl-dev \
#            gcc \
#            g++ \
#            make \
#            cmake

      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Cache cargo dependencies"
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: "Build with Docker"
        run: |
          docker run --rm -v ${{ github.workspace }}:/usr/src/app -w /usr/src/app rust:alpine sh -c '
            echo "https://dl-cdn.alpinelinux.org/alpine/v3.22/main" > /etc/apk/repositories &&
            echo "https://dl-cdn.alpinelinux.org/alpine/v3.22/community" >> /etc/apk/repositories &&
            apk update &&
            apk add --no-cache \
              musl-dev \
              pkgconf \
              git \
              cmake \
              meson \
              ninja \
              glib-dev \
              gtk4.0-dev \
              libadwaita-dev \
              cairo-dev \
              pango-dev \
              gdk-pixbuf-dev \
              openssl-dev \
              curl &&
            rustup target add x86_64-unknown-linux-musl &&
            export PKG_CONFIG_ALLOW_CROSS=1 &&
            export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig &&
            export OPENSSL_DIR=/usr &&
            export OPENSSL_STATIC=1 &&
            export OPENSSL_LIB_DIR=/usr/lib &&
            export OPENSSL_INCLUDE_DIR=/usr/include &&
            cargo build --release --target x86_64-unknown-linux-musl --features "${{ matrix.features }}" --locked --verbose
          '

#      - name: "Cache cargo dependencies"
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.cargo
#            target
#          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-cargo-
#
#      - name: "Install Rust"
#        uses: dtolnay/rust-toolchain@stable
#        with:
#          targets: ${{ matrix.target }}
#          components: clippy rustfmt
#
#      - name: "Configure cross-compilation"
#        run: |
#          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
#          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-musl/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
#          echo "PKG_CONFIG_SYSROOT_DIR=/usr/x86_64-linux-musl" >> $GITHUB_ENV
#
#      - name: "Check code"
#        env:
#          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
#          OPENSSL_STATIC: 1
#        run: |
#          cargo fmt --
#          cargo clippy --no-deps --verbose --locked --features "${{ matrix.features }}" --target ${{ matrix.target }} -- -D warnings
#
#      - name: "Build project"
#        run: |
#          echo "Building with features: ${{ matrix.features }}"
#          cargo build --release --verbose --locked --target ${{ matrix.target }} --features "${{ matrix.features }}"
#
#      - name: "Tests project"
#        run: cargo test --release --locked --verbose --no-fail-fast --target ${{ matrix.target }} --features "${{ matrix.features }}"

      - name: "Verify static linking"
        run: |
          BIN="${{ env.APP_PATH }}/${{ env.APP_NAME }}"
          file $BIN
          ldd $BIN || echo "Static binary confirmed"
      

      - name: "Extract version number"
        run: |
          VERSION_NUMBER=$(head -n 1 Changelog.md | cut -d ':' -f 2- | tr -d ' #version')

          if [[ ! "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: VERSION_NUMBER is not in valid format: ${VERSION_NUMBER}"
            echo "Expected format: 1.2.3"
            exit 1
          fi
          echo "VERSION_NUMBER=${VERSION_NUMBER}" | tee -a $GITHUB_ENV

      - name: "Import GPG key"
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.ACTIONS_KEY }}
          passphrase: ${{ secrets.ACTIONS_PASS }}
          git_user_signingkey: true
          git_commit_gpgsign: false
          git_tag_gpgsign: true

      - name: "Create tag"
        run: |
          git config user.name "${{ env.APP_NAME }}"
          git config user.email "${{ secrets.ACTIONS_EMAIL }}"
          VERSION="v${{ env.VERSION_NUMBER }}"

          echo "Checking if tag $VERSION exists..."
          if ! git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION does not exists. Creating new signed tag"
            if ! git tag -a "$VERSION" -s -m "Release $VERSION"; then
              echo "GPG signing failed"
              exit 1
            fi
              git push origin "$VERSION" || {
                echo "Tag push failed"
                exit 1
              }
              echo "Tag $VERSION created sucessfully."
              git ls-remote --tags origin
            else
              echo "Tag $VERSION already exists, skipping"
          fi

      - name: "Generate signature file"
        run: |
          BIN="${{ env.APP_PATH }}/${{ env.APP_NAME }}"
          SIG="${BIN}-${{ matrix.features }}.sig"

          if [ ! -f "$BIN" ]; then
            echo "Error: Binary not found at $BIN"
            exit 1
          fi

          $BIN & PID=$!
          for i in {1..30}; do
            [ -f "$SIG" ] && break
            sleep 1
          done
          kill $PID || true

          if [ ! -f "$SIG" ]; then
            echo "Error: SIG file not found at $SIG"
            exit 1
          fi
          echo "Signature file generated sucessfully at: $SIG"

      - name: Prepare release files
        run: |
          BIN_DIR="target/${{ matrix.target }}/release"
          APP_NAME="${{ env.APP_NAME }}"
          FEATURES="${{ matrix.features }}"
          VERSION="${{ env.VERSION_NUMBER }}"
          OUTPUT_DIR="${{ env.OUTPUT_DIR }}"
          TARGET="${{ matrix.target }}"
          BIN_FILE="${APP_NAME}"
          SIG_FILE="${APP_NAME}-${FEATURES}.sig"
          OUTPUT_BIN="${APP_NAME}-${VERSION}-${FEATURES}"
          TAR_FILE="${OUTPUT_BIN}-${TARGET}.tar.gz"

          strip "${BIN_DIR}/${BIN_FILE}"
          mkdir -p "${OUTPUT_DIR}"
          cp "${BIN_DIR}/${BIN_FILE}" "${OUTPUT_DIR}/${OUTPUT_BIN}"
          cp "${BIN_DIR}/${SIG_FILE}" "${OUTPUT_DIR}/${SIG_FILE}"

          tar -czf "${OUTPUT_DIR}/${TAR_FILE}" \
            -C "${OUTPUT_DIR}" "${OUTPUT_BIN}" "${SIG_FILE}" \
            -C ../../ Changelog.md LICENSE.txt \
          && echo "Release files prepared"

      - name: "Upload to GitHub Releases"
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{ env.OUTPUT_DIR }}/${{ env.APP_NAME }}-${{ env.VERSION_NUMBER }}-${{ matrix.features }}-${{ matrix.target }}.tar.gz
            Changelog.md
            LICENSE.txt
          draft: false
          prerelease: true
          tag_name: v${{ env.VERSION_NUMBER }}