name: Release Linux x86_64 MUSL

on:
  push:
    branches: [ "musl" ]
  pull_request:
    branches: [ "musl" ]
#  workflow_run:
#    workflows: ["Verify GPG Signature"]
#    types:
#      - completed
#    branches: [ "master" ]

permissions:
  contents: write
  packages: write

jobs:
  standard:
    name: ${{ matrix.features }}-${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ x86_64-unknown-linux-musl ]
#        features: [ "offline", "full", "dev" ]
        features: [ "dev" ]
      fail-fast: false

    env:
      APP_NAME: "QR2M"
      APP_PATH: "target/${{ matrix.target }}/release"
      OUTPUT_DIR: "LAB7041/${{ matrix.target }}"

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Cache cargo dependencies"
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: "Build with Docker"
        run: |
          docker run --rm -v ${{ github.workspace }}:/usr/src/app -w /usr/src/app rust:alpine sh -c '
            echo "https://dl-cdn.alpinelinux.org/alpine/v3.22/main" > /etc/apk/repositories &&
            echo "https://dl-cdn.alpinelinux.org/alpine/v3.22/community" >> /etc/apk/repositories &&
            apk update &&
            apk add --no-cache \
              musl-dev \
              pkgconf \
              git \
              cmake \
              meson \
              ninja \
              glib-dev \
              gtk4.0-dev \
              libadwaita-dev \
              cairo-dev \
              pango-dev \
              gdk-pixbuf-dev \
              harfbuzz-dev \
              graphene-dev \
              vulkan-loader-dev \
              fontconfig-dev \
              freetype-dev \
              openssl-dev \
              curl \
              file &&
            # List installed packages
              echo "Installed packages:" &&
              apk list -I | grep -E "gtk4.0-dev|libadwaita-dev|pkgconf" &&
            # Find .pc files
              echo "Listing .pc files for gtk4 and libadwaita:" &&
              GTK4=$(apk info -L gtk4.0-dev | grep -E '/gtk4\.pc$' || echo "") &&
              ADWAITA=$(apk info -L libadwaita-dev | grep -E '/libadwaita-1\.pc$' || echo "") &&
              echo "GTK4=$GTK4" &&
              echo "ADWAITA=$ADWAITA" &&
              [ -n "$GTK4" ] || { echo "Error: gtk4.pc not found in gtk4.0-dev"; exit 1; } &&
              [ -n "$ADWAITA" ] || { echo "Error: libadwaita-1.pc not found in libadwaita-dev"; exit 1; } &&
              export PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib/x86_64-linux-musl/pkgconfig:/usr/local/lib/pkgconfig" &&
              GTK_PC_PATH=$(dirname "$GTK4") &&
              LIBADWAITA_PC_PATH=$(dirname "$ADWAITA") &&
              export PKG_CONFIG_PATH="$GTK_PC_PATH:$LIBADWAITA_PC_PATH:$PKG_CONFIG_PATH" &&
              echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" &&
              pkg-config --modversion gtk4 || { echo "Error: gtk-4.0 not found"; exit 1; } &&
              pkg-config --modversion libadwaita-1 || { echo "Error: libadwaita-1.0 not found"; exit 1; } &&
            rustup target add x86_64-unknown-linux-musl &&
            export PKG_CONFIG_ALLOW_CROSS=1 &&
            export CFLAGS="-I/usr/include" &&
            export LDFLAGS="-L/usr/lib" &&
            export OPENSSL_DIR=/usr &&
            export OPENSSL_LIB_DIR=/usr/lib &&
            export OPENSSL_INCLUDE_DIR=/usr/include &&
            export RUSTFLAGS="-C target-feature=-crt-static -C link-args=-Wl,-rpath,/usr/lib" &&
            cargo build --release --target x86_64-unknown-linux-musl --features "${{ matrix.features }}" --locked --verbose &&
            # cargo test --release --locked --no-fail-fast --target ${{ matrix.target }} --features "${{ matrix.features }}" &&
            export BIN="${{ env.APP_PATH }}/${{ env.APP_NAME }}" &&
            # List target directory
              echo "Listing target directory:" &&
              ls -l "${{ env.APP_PATH }}" &&
            # Verify binary
              [ -f "$BIN" ] || { echo "Error: Binary not found at $BIN"; exit 1; } &&
              file "$BIN" &&
              ldd "$BIN" &&
              chmod +x "$BIN" &&
            # Create signature file
              SIG="${{ env.APP_PATH }}/${{ env.APP_NAME }}-${{ matrix.features }}.sig" &&
              $BIN & PID=$! &&
              for i in {1..30}; do [ -f "$SIG" ] && break; sleep 1; done &&
              { kill $PID 2>/dev/null || true; } &&
              { [ -f "$SIG" ] || { echo "Error: SIG file not found at $SIG"; exit 1; } } &&
              echo "Signature generated at: $SIG" &&
            # Copy files
              mkdir -p "${{ env.OUTPUT_DIR }}" &&
              { cp "$BIN" "${OUTPUT_DIR}" || { echo "Error: Failed to copy BIN to ${OUTPUT_DIR}"; exit 1; } } &&
              { cp "$SIG" "${OUTPUT_DIR}" || { echo "Error: Failed to copy SIG to ${OUTPUT_DIR}"; exit 1; } }
          '

      - name: "Extract version number"
        run: |
          VERSION_NUMBER=$(head -n 1 Changelog.md | cut -d ':' -f 2- | tr -d ' #version')

          if [[ ! "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: VERSION_NUMBER is not in valid format: ${VERSION_NUMBER}"
            echo "Expected format: 1.2.3"
            exit 1
          fi
          echo "VERSION_NUMBER=${VERSION_NUMBER}" | tee -a $GITHUB_ENV

      - name: "Import GPG key"
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.ACTIONS_KEY }}
          passphrase: ${{ secrets.ACTIONS_PASS }}
          git_user_signingkey: true
          git_commit_gpgsign: false
          git_tag_gpgsign: true

      - name: "Create tag"
        run: |
          git config user.name "${{ env.APP_NAME }}"
          git config user.email "${{ secrets.ACTIONS_EMAIL }}"
          VERSION="v${{ env.VERSION_NUMBER }}"

          echo "Checking if tag $VERSION exists..."
          if ! git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION does not exists. Creating new signed tag"
            if ! git tag -a "$VERSION" -s -m "Release $VERSION"; then
              echo "GPG signing failed"
              exit 1
            fi
              git push origin "$VERSION" || {
                echo "Tag push failed"
                exit 1
              }
              echo "Tag $VERSION created sucessfully."
              git ls-remote --tags origin
            else
              echo "Tag $VERSION already exists, skipping"
          fi

#      - name: "Generate signature file"
#        run: |
#          BIN="${{ env.OUTPUT_DIR }}/${{ env.APP_NAME }}"
#          SIG="${{ env.OUTPUT_DIR }}/${{ env.APP_NAME }}-${{ matrix.features }}.sig"
#
#          [ -f "$BIN" ] || { echo "Error: Binary not found at $BIN"; exit 1; }
#          ls -l ${{ env.OUTPUT_DIR }}
#          sudo chmod +x "$BIN"
#          $BIN & PID=$!
#          for i in {1..30}; do [ -f "$SIG" ] && break; sleep 1; done
#          kill $PID 2>/dev/null || true
#          [ -f "$SIG" ] || { echo "Error: SIG file not found at $SIG"; exit 1; }
#          echo "Signature generated at: $SIG"

      - name: Prepare release files
        run: |
          BIN="${{ env.APP_NAME }}"
          SIG="${{ env.APP_NAME }}-${{ matrix.features }}.sig"
          TAR_FILE="${{ env.APP_NAME }}-${{ env.VERSION_NUMBER }}-${{ matrix.features }}-${{ matrix.target }}.tar.gz"
          
          strip "${{ env.OUTPUT_DIR }}/$BIN" || echo "Warning: strip failed"
          
          tar -czf "$TAR_FILE" \
            -C "${{ env.OUTPUT_DIR }}" "$BIN" "$SIG" \
            -C "${{ github.workspace }}" Changelog.md LICENSE.txt

      - name: "Upload to GitHub Releases"
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{ env.OUTPUT_DIR }}/${{ env.APP_NAME }}-${{ env.VERSION_NUMBER }}-${{ matrix.features }}-${{ matrix.target }}.tar.gz
            Changelog.md
            LICENSE.txt
          draft: false
          prerelease: true
          tag_name: v${{ env.VERSION_NUMBER }}