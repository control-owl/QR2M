name: Verify GPG Signature
on:
  push:
    branches:  [ "master" ]
  pull_request:
    branches:  [ "master" ]

permissions:
  contents: read

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Import GPG Keys
        run: |
          echo "${{ secrets.GPG_PUBLIC_KEY_CONTROL_OWL }}" | gpg --import
          echo "${{ secrets.GPG_PUBLIC_KEY_QR2M }}" | gpg --import
          echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key "$CONTROL_OWL_KEY_ID" trust
          echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key "$QR2M_KEY_ID" trust
          gpg --list-keys --with-colons
        env:
          GPG_PUBLIC_KEY_CONTROL_OWL: ${{ secrets.GPG_PUBLIC_KEY_CONTROL_OWL }}
          GPG_PUBLIC_KEY_QR2M: ${{ secrets.GPG_PUBLIC_KEY_QR2M }}

      # - name: Verify GPG Signatures simple
      #   run: |
      #     git log --pretty=format:"%H %G?" HEAD^..HEAD | while read commit status; do
      #       echo "Checking commit: $commit"
      #       if [ "$status" != "G" ]; then
      #         echo "Error: Commit $commit is not GPG-signed!"
      #         exit 1
      #       else
      #         echo "Commit $commit is signed."
      #       fi
      #     done

      - name: Verify Control Owl GPG Signature
      run: |
        COMMIT_HASH=$(git rev-parse HEAD)
        echo "Checking commit: $COMMIT_HASH"
        
        COMMIT_INFO=$(git log -1 --pretty=format:"%H %G? %GK" HEAD^..HEAD)
        read COMMIT STATUS KEY_ID <<< "$COMMIT_INFO"
        echo "Commit: $COMMIT"
        echo "Status: $STATUS"
        echo "Key ID: $KEY_ID"

        EXPECTED_KEY_ID="2524C8FEB60EFCB0"

        case "$STATUS" in
          G)  # Good signature, now check key
              if [ "$KEY_ID" != "$EXPECTED_KEY_ID" ]; then
                echo "Error: Commit $COMMIT is signed with an unexpected key: $KEY_ID (expected: $EXPECTED_KEY_ID)"
                exit 1
              fi
              echo "Success: Commit $COMMIT is signed with the expected key."
              ;;
          N)  echo "Error: Commit $COMMIT is not GPG-signed!"
              git log -1 --show-signature
              exit 1
              ;;
          B)  echo "Error: Commit $COMMIT has a BAD signature! Possible data tampering."
              exit 1
              ;;
          U)  echo "Error: Commit $COMMIT is signed with an UNKNOWN key. Import the key to verify."
              exit 1
              ;;
          X)  echo "Error: Commit $COMMIT was signed with an EXPIRED key."
              exit 1
              ;;
          Y)  echo "Error: Commit $COMMIT is valid but signed with an expired key ($KEY_ID)."
              exit 1
              ;;
          R)  echo "Error: Commit $COMMIT was signed with a REVOKED key ($KEY_ID)."
              exit 1
              ;;
          E)  echo "Error: Commit $COMMIT encountered an ERROR during verification."
              exit 1
              ;;
          *)  echo "Error: Commit $COMMIT has an UNKNOWN status: $STATUS"
              exit 1
              ;;
        esac