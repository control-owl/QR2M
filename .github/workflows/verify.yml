name: Verify GPG Signature
on:
  push:
    branches:  [ "master" ]
  pull_request:
    branches:  [ "master" ]

permissions:
  contents: read

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Import GPG Keys
        run: |
          # Import Control Owl key
          echo "${{ secrets.GPG_PUBLIC_KEY_CONTROL_OWL }}" | gpg --import
          # Import QR2M key
          echo "${{ secrets.GPG_PUBLIC_KEY_QR2M }}" | gpg --import
        env:
          GPG_PUBLIC_KEY_CONTROL_OWL: ${{ secrets.GPG_PUBLIC_KEY_CONTROL_OWL }}
          GPG_PUBLIC_KEY_QR2M: ${{ secrets.GPG_PUBLIC_KEY_QR2M }}

      # - name: Verify GPG Signatures simple
      #   run: |
      #     git log --pretty=format:"%H %G?" HEAD^..HEAD | while read commit status; do
      #       echo "Checking commit: $commit"
      #       if [ "$status" != "G" ]; then
      #         echo "Error: Commit $commit is not GPG-signed!"
      #         exit 1
      #       else
      #         echo "Commit $commit is signed."
      #       fi
      #     done

      - name: Verify Control Owl GPG Signature
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "Checking commit: $COMMIT_HASH"
          
          git log --pretty=format:"%H %G? %GK" HEAD^..HEAD > commit_info.txt
          read COMMIT STATUS KEY_ID < commit_info.txt
          
          EXPECTED_KEY_ID="2524C8FEB60EFCB0"
          
          if [ "$STATUS" != "G" ]; then
            echo "Error: Commit $COMMIT is not GPG-signed!"
            exit 1
          elif [ "$KEY_ID" != "$EXPECTED_KEY_ID" ]; then
            echo "Error: Commit $COMMIT is signed, but not with expected key $EXPECTED_KEY_ID (got $KEY_ID)!"
            exit 1
          else
            echo "Commit $COMMIT is signed with expected key $EXPECTED_KEY_ID."
          fi