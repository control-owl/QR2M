name: Rust Linux Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
#   check:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         features: ["", "full"]
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
# 
#       - name: Install system dependencies
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y libgtk-4-dev libadwaita-1-dev pkg-config
# 
#       - name: Install Rust toolchain
#         uses: dtolnay/rust-toolchain@stable
#         with:
#           components: clippy
# 
#       - name: Cache Cargo dependencies
#         uses: actions/cache@v3
#         with:
#           path: |
#             ~/.cargo/registry
#             ~/.cargo/git
#           key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.features }}
#           restore-keys: |
#             ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
#             ${{ runner.os }}-cargo-
# 
#       - name: Run Clippy
#         run: cargo clippy --no-deps --verbose --locked --features "${{ matrix.features }}" -- -D warnings
# 
#       - name: Run Cargo check
#         run: cargo check --verbose --locked --features "${{ matrix.features }}"
# 
#       - name: Run tests
#         run: cargo test --release --locked --verbose --no-fail-fast --features "${{ matrix.features }}"

  versioning:
    runs-on: ubuntu-latest
    # needs: check
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version from Cargo.toml and append commit hash
        id: extract_version
        run: |
          # Extract version from Cargo.toml
          VERSION=$(grep '^version =' Cargo.toml | head -1 | cut -d '"' -f2)
          echo "Base version from Cargo.toml: $VERSION"

          # Get short commit hash (e.g., 7 characters)
          COMMIT_HASH=$(git rev-parse --short=7 HEAD)
          echo "Commit hash: $COMMIT_HASH"

          # Combine version with commit hash
          NEW_VERSION="$VERSION-$COMMIT_HASH"
          echo "Full version: $NEW_VERSION"

          # Output the version for downstream jobs
          echo "version=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
      # - name: Versioning
      #   id: extract_version
      #   run: |
      #     latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
      #     echo "Latest tag: $latest_tag"
      #     IFS='.' read -r -a parts <<< "${latest_tag//v/}"
      #     major=${parts[0]}
      #     minor=${parts[1]}
      #     patch=${parts[2]}
      #     new_patch=$((patch + 1))
      #     new_version="v$major.$minor.$new_patch"
      #     echo "version=$new_version" >> $GITHUB_ENV
      #     echo "version=$new_version" >> $GITHUB_OUTPUT


      # - name: Extract version from Cargo.toml
      #   id: extract_version
      #   run: |
      #     VERSION=$(grep '^version =' Cargo.toml | head -1 | cut -d '"' -f2)
      #     echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag v${{ steps.extract_version.outputs.version }} || echo "Tag already exists"
          git push origin v${{ steps.extract_version.outputs.version }} || echo "Tag push failed (may already exist)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: [versioning] #  [check, versioning]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]
        features: ["", "full"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-4-dev libadwaita-1-dev pkg-config

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.features }}

      - name: Build Release
        run: cargo build --release --verbose --locked --features "${{ matrix.features }}" --target ${{ matrix.target }}

      - name: Store Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: QR2M-v${{ needs.versioning.outputs.version }}-${{ matrix.target }}-${{ matrix.features || 'basic' }}
          path: target/${{ matrix.target }}/release/*
          if-no-files-found: error

  release:
    needs: [build, versioning]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]
        features: ["", "full"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Release Notes
        id: changelog
        run: |
          echo "Release Notes for v${{ needs.versioning.outputs.version }}" > RELEASE.txt
          echo "Commits since last tag:" >> RELEASE.txt
          git log $(git describe --tags --abbrev=0 @^)..@ --oneline >> RELEASE.txt || echo "No previous tag found"
          echo "rfsgdshfjhgjhjzgjelease_body<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: QR2M-v${{ needs.versioning.outputs.version }}-${{ matrix.target }}-${{ matrix.features || 'basic' }}
          path: artifacts

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*/*
            RELEASE.txt
            LICENSE.txt
          name: Release v${{ needs.versioning.outputs.version }}
          body: ${{ steps.changelog.outputs.release_body }}
          draft: false
          tag_name: ${{ needs.versioning.outputs.version }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}