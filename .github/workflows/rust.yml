name: Rust

on:
  push:
    branches: [ "master", "tester" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "master", "tester" ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features: ["", "anu", "dev"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Install system dependencies (Linux)
        run: sudo apt-get update && sudo apt-get install -y libgtk-4-dev libadwaita-1-dev pkg-config
      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.features }}
      - name: Run Clippy
        run: cargo clippy --all-targets --verbose --locked --features "${{ matrix.features }}" -- -D warnings
      - name: Run Cargo check
        run: cargo check --verbose --locked --features "${{ matrix.features }}" -- -D warnings
      - name: Run tests
        run: cargo test --release --locked --verbose --no-fail-fast --features "${{ matrix.features }}"
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Audit dependencies
        run: cargo audit

  build-and-release:
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libgtk-4-dev libadwaita-1-dev pkg-config
      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install gtk4 libadwaita pkg-config
      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build (Release)
        run: cargo build --release --verbose --locked -- -D warnings
      - name: Rename executable
        run: mv target/release/QR2M target/release/QR2M-${{ github.ref_name }}-${{ matrix.os }}
      - name: Compress executable
        run: tar -czf target/release/QR2M-${{ github.ref_name }}-${{ matrix.os }}.tar.gz -C target/release QR2M-${{ github.ref_name }}-${{ matrix.os }}
      - name: Generate SHA256 checksum
        run: sha256sum target/release/QR2M-${{ github.ref_name }}-${{ matrix.os }}.tar.gz > target/release/QR2M-${{ github.ref_name }}-${{ matrix.os }}.sha256
      - name: Generate release notes
        id: changelog
        run: |
          echo "Release Notes for ${{ github.ref_name }}" > release_notes.txt
          echo "Commits since last tag:" >> release_notes.txt
          git log $(git describe --tags --abbrev=0 @^)..@ --oneline >> release_notes.txt
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Upload executable to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/release/QR2M-${{ github.ref_name }}-${{ matrix.os }}.tar.gz
            target/release/QR2M-${{ github.ref_name }}-${{ matrix.os }}.sha256
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.release_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}